//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 3.0.0.1
//
// Created by Quasar Development at 21-03-2014
//
//---------------------------------------------------



#import "GetStaffAppointmentsRequest.h"
#import "GetStaffAppointmentsResult.h"
#import "Appointment.h"
#import "ScheduleItem.h"
#import "Resource.h"
#import "ClientService.h"
#import "Program.h"
#import "Rep.h"
#import "Staff.h"
#import "Unavailability.h"
#import "Availability.h"
#import "SessionType.h"
#import "Location.h"
#import "ClientRelationship.h"
#import "Client.h"
#import "ClientIndex.h"
#import "ClientIndexValue.h"
#import "AddOrUpdateAppointmentsRequest.h"
#import "AddOrUpdateAppointmentsResult.h"
#import "GetBookableItemsRequest.h"
#import "GetBookableItemsResult.h"
#import "GetScheduleItemsRequest.h"
#import "GetScheduleItemsResult.h"
#import "AddOrUpdateAvailabilitiesRequest.h"
#import "AddOrUpdateAvailabilitiesResult.h"
#import "GetActiveSessionTimesRequest.h"
#import "GetActiveSessionTimesResult.h"
#import "GetAppointmentOptionsRequest.h"
#import "GetAppointmentOptionsResult.h"
#import "Helper.h"
#import "RequestResultHandler.h"
#import "SoapError.h"



@implementation RequestResultHandler

@synthesize Header,Body;
@synthesize OutputHeader,OutputBody,OutputFault;
@synthesize SkipNullProperties,Callback;

static NSDictionary* classNames;
NSURLConnection* connection;
NSMutableDictionary* namespaces;
DDXMLDocument *xml;

-(id)init {
if ((self=[super init])) {
        namespaces=[NSMutableDictionary dictionary];
        [self createEnvelopeXml];

        if(!classNames)
        {
            classNames = [NSDictionary dictionaryWithObjectsAndKeys:    
            [GetStaffAppointmentsRequest class],@"http://clients.mindbodyonline.com/api/0_5^^GetStaffAppointmentsRequest",
            [GetStaffAppointmentsResult class],@"http://clients.mindbodyonline.com/api/0_5^^GetStaffAppointmentsResult",
            [Appointment class],@"http://clients.mindbodyonline.com/api/0_5^^Appointment",
            [ScheduleItem class],@"http://clients.mindbodyonline.com/api/0_5^^ScheduleItem",
            [Resource class],@"http://clients.mindbodyonline.com/api/0_5^^Resource",
            [ClientService class],@"http://clients.mindbodyonline.com/api/0_5^^ClientService",
            [Program class],@"http://clients.mindbodyonline.com/api/0_5^^Program",
            [Rep class],@"http://clients.mindbodyonline.com/api/0_5^^Rep",
            [Staff class],@"http://clients.mindbodyonline.com/api/0_5^^Staff",
            [Unavailability class],@"http://clients.mindbodyonline.com/api/0_5^^Unavailability",
            [Availability class],@"http://clients.mindbodyonline.com/api/0_5^^Availability",
            [SessionType class],@"http://clients.mindbodyonline.com/api/0_5^^SessionType",
            [Location class],@"http://clients.mindbodyonline.com/api/0_5^^Location",
            [ClientRelationship class],@"http://clients.mindbodyonline.com/api/0_5^^ClientRelationship",
            [Client class],@"http://clients.mindbodyonline.com/api/0_5^^Client",
            [ClientIndex class],@"http://clients.mindbodyonline.com/api/0_5^^ClientIndex",
            [ClientIndexValue class],@"http://clients.mindbodyonline.com/api/0_5^^ClientIndexValue",
            [AddOrUpdateAppointmentsRequest class],@"http://clients.mindbodyonline.com/api/0_5^^AddOrUpdateAppointmentsRequest",
            [AddOrUpdateAppointmentsResult class],@"http://clients.mindbodyonline.com/api/0_5^^AddOrUpdateAppointmentsResult",
            [GetBookableItemsRequest class],@"http://clients.mindbodyonline.com/api/0_5^^GetBookableItemsRequest",
            [GetBookableItemsResult class],@"http://clients.mindbodyonline.com/api/0_5^^GetBookableItemsResult",
            [GetScheduleItemsRequest class],@"http://clients.mindbodyonline.com/api/0_5^^GetScheduleItemsRequest",
            [GetScheduleItemsResult class],@"http://clients.mindbodyonline.com/api/0_5^^GetScheduleItemsResult",
            [AddOrUpdateAvailabilitiesRequest class],@"http://clients.mindbodyonline.com/api/0_5^^AddOrUpdateAvailabilitiesRequest",
            [AddOrUpdateAvailabilitiesResult class],@"http://clients.mindbodyonline.com/api/0_5^^AddOrUpdateAvailabilitiesResult",
            [GetActiveSessionTimesRequest class],@"http://clients.mindbodyonline.com/api/0_5^^GetActiveSessionTimesRequest",
            [GetActiveSessionTimesResult class],@"http://clients.mindbodyonline.com/api/0_5^^GetActiveSessionTimesResult",
            [GetAppointmentOptionsRequest class],@"http://clients.mindbodyonline.com/api/0_5^^GetAppointmentOptionsRequest",
            [GetAppointmentOptionsResult class],@"http://clients.mindbodyonline.com/api/0_5^^GetAppointmentOptionsResult",
            nil]; 

        }
    }
    return self;
}

    
-(NSString*) getEnvelopeString
{
    return [xml XMLString];
}

-(DDXMLDocument*) createEnvelopeXml
{
    NSString *envelope = [NSString stringWithFormat:@"<soap:Envelope xmlns:c=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"></soap:Envelope>"];
    xml = [[DDXMLDocument alloc] initWithXMLString:envelope options:0 error:nil];
    
    DDXMLElement *root=[xml rootElement];
    Header=[[DDXMLElement alloc] initWithName:@"soap:Header"];
    Body=[[DDXMLElement alloc] initWithName:@"soap:Body"];
    [root addChild:Header];
    [root addChild:Body];
    return xml;
}

-(id)createObject: (DDXMLElement*) node type:(Class) type
{
    
    DDXMLNode* nilAttr=[Helper getAttribute:node name:@"nil" url:XSI];
    if(nilAttr!=nil && [[nilAttr stringValue]boolValue])
    {
        return nil;
    }

    DDXMLNode* typeAttr=[Helper getAttribute:node name:@"type" url:XSI];
    if(typeAttr !=nil)
    {
        NSString* attrValue=[typeAttr stringValue];
        NSArray* splitString=[attrValue componentsSeparatedByString:@":"];
        DDXMLNode* namespace=[node resolveNamespaceForName:attrValue];
        NSString* typeName=[splitString count]==2?[splitString objectAtIndex:1]:attrValue;
        if(namespace!=nil)
        {
            NSString* classType=[NSString stringWithFormat:@"%@^^%@",[namespace stringValue],typeName];
            Class temp=[classNames objectForKey: classType];
            if(temp!=nil)
            {
                type=temp;
            }
        }
    }

    DDXMLNode* hrefAttr=[Helper getAttribute:node name:@"href" url:@""];
    if(hrefAttr==nil)
    {
        hrefAttr=[Helper getAttribute:node name:@"ref" url:@""];
    }
    if(hrefAttr!=nil)
    {
        NSString* hrefId=[[hrefAttr stringValue] substringFromIndex:1];
        NSString* xpathQuery=[NSString stringWithFormat:@"//*[@id='%@']",hrefId];
        NSArray *nodes=[node.rootDocument nodesForXPath:xpathQuery error:nil];

        if([nodes count]>0)
        {
            node=[nodes objectAtIndex:0];
        }
    }

    id obj=[self createInstance:type node:node request:self];

    
    return obj;
}
    
-(id) createInstance:(Class) type node: (DDXMLNode*)node request :(RequestResultHandler *)request
{
    SEL initSelector=@selector(initWithXml:__request:);
    id allocObj=[type alloc];
    IMP imp = [allocObj methodForSelector:initSelector];
    id (*func)(id, SEL, DDXMLNode*, RequestResultHandler *) = (void *)imp;
    id obj = func(allocObj, initSelector, node, self);
    return obj;
}

-(NSString*) getNamespacePrefix:(NSString*) url propertyElement:(DDXMLElement*) propertyElement
{
    if([url length]==0)
    {
        return nil;
    }
    DDXMLElement* rootElement= [[propertyElement rootDocument] rootElement];
    NSString* prefix= [namespaces valueForKey:url];
    if(prefix==nil)
    {
        prefix=[NSString stringWithFormat:@"n%u",[namespaces count]+1];
        DDXMLNode* ns=[DDXMLNode namespaceWithName:prefix stringValue:url];
        [rootElement addNamespace:ns];
        [namespaces setValue:prefix forKey:url];
    }
    return prefix;
}
        
-(NSString*) getXmlFullName:(NSString*) name URI:(NSString*) URI propertyElement:(DDXMLElement*) propertyElement
{
    NSString *prefix=[self getNamespacePrefix:URI propertyElement:propertyElement];
    NSString *fullname=name;
    if(prefix!=nil)
    {
        fullname=[NSString stringWithFormat:@"%@:%@",prefix,name];
    }
    return fullname;
}
    
-(DDXMLNode*) addAttribute:(NSString*) name URI:(NSString*) URI stringValue:(NSString*) stringValue element:(DDXMLElement*) element
{
    NSString *fullname=[self getXmlFullName:name URI:URI propertyElement:element];
    DDXMLNode *refAttr=[DDXMLNode attributeWithName:fullname stringValue:stringValue];
    [element addAttribute:refAttr];
    return refAttr;
}

-(DDXMLElement*) writeElement:(NSString*)name URI: (NSString*) URI parent:(DDXMLElement*) parent
{
    NSString *fullname=[self getXmlFullName:name URI:URI propertyElement:parent];
    DDXMLElement* propertyElement=[[DDXMLElement alloc] initWithName:fullname];
    [parent addChild:propertyElement];
    return propertyElement;
}


-(DDXMLElement*) writeElement:(id)obj type:(Class)type name: (NSString*)name URI: (NSString*) URI parent:(DDXMLElement*) parent skipNullProperty:(BOOL)skipNullProperty
{
    if(obj==nil && skipNullProperty)
    {
        return nil;
    }
    DDXMLElement* propertyElement=[self writeElement:name URI:URI parent:parent];
    
    if(obj==nil)
    {
        [self addAttribute:@"nil" URI:XSI stringValue:@"true" element:propertyElement];
        return nil;

    }

    
    Class currentType=[obj class];
    if(currentType!=type)
    {
        NSString* xmlType=(NSString*)[[classNames allKeysForObject:currentType] lastObject];//add namespace?
        if(xmlType!=nil)
        {
            
            NSArray* splitType=[xmlType componentsSeparatedByString:@"^^"];
            NSString *fullname=[self getXmlFullName:[splitType objectAtIndex:1] URI:[splitType objectAtIndex:0] propertyElement:propertyElement];
            [self addAttribute:@"type" URI:XSI stringValue:fullname element:propertyElement];
        }
        
    }
    return propertyElement;
}





        
-(void)setResponse:(NSData *)response
{
    DDXMLDocument *__doc=[[DDXMLDocument alloc] initWithData:response options:0 error:nil];
    DDXMLElement *__root=[__doc rootElement];
    if(__root==nil)
    {
        NSString* errorMessage=[[NSString alloc]initWithData:response encoding:NSUTF8StringEncoding ];
        OutputFault=[NSError  errorWithDomain:errorMessage code:0 userInfo:nil];
        return;
    }
    OutputBody=[Helper getNode:__root  name:@"Body" URI:@"http://schemas.xmlsoap.org/soap/envelope/"];
    OutputHeader=[Helper getNode:__root  name:@"Header" URI:@"http://schemas.xmlsoap.org/soap/envelope/"];
    DDXMLElement* fault=[Helper getNode:OutputBody  name:@"Fault" URI:@"http://schemas.xmlsoap.org/soap/envelope/"];
    if(fault!=nil)
    {
        DDXMLElement* faultString=[Helper getNode:fault name:@"faultstring"];
        id faultObj=nil;
        
        OutputFault=[[SoapError alloc] initWithDetails:[faultString stringValue] details:faultObj];
    }
}

-(void) sendImplementation:(NSMutableURLRequest*) request
{
    NSError* innerError;
    NSData *data=[NSURLConnection sendSynchronousRequest:request returningResponse:nil error:&innerError];
    if(data==nil)
    {
        OutputFault = innerError;
    }
    else
    {
        [self setResponse:data];
    }
}


@end
